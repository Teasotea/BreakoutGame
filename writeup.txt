1. Про "нелокальні" змінні

а) Список таких змінних:

private GRect rack;
private double startRackX;
private GOval ball;
private double startBallX;
private boolean isRoundEnded;
private double vx, vy;
private double brickX, brickY;
private Color brickColor;

б) Опис до них

private GRect rack;
Змінна відповідає за ракетку. Неодноразово описується
та використовується різними методами. Якби була локальною,це було б незручно,
код би не вдалося поділити на багато невеликих методів.
Потрібно було б описувати її дії в злитному довгому коді, з котрим важче було б працювати.

private GOval ball;
Змінна відповідає за об'єкт м'яч. Аналогічно, як з ракеткою


private double startRackX;
Змінна відповідає за Х координату ракетки. Вона змінюється багато разів впродовж програми,
використовується різними методами, потребує бути глобальною.

private double startBallX;
Змінна відповідає за Х координату м'яча. Вона змінюється багато разів впродовж програми,
використовується різними методами, потребує бути глобальною.

private boolean isRoundEnded;
Змінна відповідає за перевірку чи завершився поточний раунд. Всього три раунди.
Використовується різними методами, потребує бути глобальною.

private double vx, vy;
Змінні відповідають за швидкість та напрям руху м'яча по х та у координатам.
Потребують бути глобальними, бо використовуються в кількох методах

private double brickX, brickY;
Змінні відповідають за х та у координати цеглинок.
Вони часто змінюються і використовуються в циклах, що будують цеглини.
Використовуються для зручності та створення можливості ділити роботу програми на кілька методів

private Color brickColor;
Змінна відповідає за колір цеглинок і також міняється. Її глобальність надає можливість помістити
дію побудови однієї цеглинки та по-суті копіювання цеглинок подібного розміру з іншими координатами
в різні методи. Локальність даної змінної змусила б писати код в одному методі

private int numOfBricks
Змінна використовується в кількох методах, відповідає жа кількість цеглинок на екрані, змінюється залежно
від прогресу гравця у "розбитті" цеглин. Не може бути константою, бо змінюється. Не може бути локальною,
бо діє в двох методах, один з яких відповідає за рух м'ча, а другий за продовження/зупинку гри

2. Гра закінчується або коли користувач втрачає три кулі, або коли уся цегла розбита.
Як ви перевіряєте закінчення гри в цьому другому випадку? Чи робили ви зміни в коді при тестуванні?

За допомогою змінної numOfBricks рахується кількість цеглинок на екрані.
Змін в коді не робила після написання гри тому, що тестувала кожен пункт ще під час його створення.
До моменту прочитання про необхідність тестувати в кінці баги були вже виправдені.
Нові баги при новому тестуванні не знайшлися